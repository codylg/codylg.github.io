extends layout

block append variables
  - var title = "Process Engine Case Study"
  - var description = "A case study of the Process Engine design project for the Rex Property Management platform."
  - var slug = "process-engine"
  - var frontPage = false

block content

  article.content-panels

    .content-full.article-page

      span.tag Case study
      h1.large Designing a Configurable Process&nbsp;Engine
      p.large This is a case study of the Process Engine project for Rex Property Management (Rex PM). The Process Engine is a workflow configuration tool that enables agencies to implement their own processes into the platform — and supporting users to efficiently manage and progress their day-to-day tasks.

      hr

      p Team: Product Designer (myself), Product Manager, CTO as technical advisor.

      figure.large
        img(src="/process-engine/process-checklist.webp" alt="A screenshot from a property management application showing a move in task with a checklist of subtasks to be completed")
        figcaption
          p A process checklist on a move out task

      h2 Background
      p.large The Rex PM platform enables Property Managers to a simple experience to manage their entire property portfolio. At it’s core is a task model which is used to drive action and improve the day-to-day workflows of users — ensuring tasks are logged and surfaced at the correct times. Tasks cover a range of core activities for a property manager — for example routine inspections, maintenance requests, compliance checks, lease reviews, and more.

      h2 The Problem
      p.large Tasks help agents to keep track of jobs to be done, and surface what they need to do today — but only at a high level. For example, an agent can ascertain that a maintenance request is in progress, but it’s not clear at what stage that request is at and what needs to be done next to progress the task. Agencies are process-driven, and our system is lacking in a method to support these processes.

      h2 Research and Discovery
      p.large The primary research goal was to learn more about these agency processes. I ran discovery sessions with agencies of varying sizes and structures and walked through their internal processes for various tasks — what happened at each stage of progressing a task and what roles within the agency were involved.
      p.large From this I was able to build out a set of user journey maps covering different tasks for a broad range of agencies. The goal of this was not to come up with a one-size-fits-all process, but to get a full understanding of the varying ways agencies operate.

      figure.large
        img(src="/process-engine/process-journey.webp" alt="A section of a user journey map showing the start of a change of sharer process for an enterprise agency")
        figcaption
          p A sample of one of the many user journeys synthesised for a task process

      h2 Insights and Opportunities
      p.large The key insight from the research conducted was that agencies are process-driven, and while processes across different agencies are similar at a high level, it’s the low level distinctions that are important — and are often a core part of the brand identity of the agency.
      p.large Trying to create a one-size-fits-all process for each type of task would not solve for the entire problem, and may even drive some agencies away from using it. We needed a more flexible approach that could still provide some general processes as a starting point, but give agencies the power to customise them to suit their own individual requirements.

      aside.callout
        h3 Problem Statement
        p.large Agencies are process-driven, and it’s important to their brand identity that they can work to their own processes. Property Managers are always busy, and have any number of tasks on the go simultaneously. They need to be able to pick up a task and understand clearly where it is at and what needs to be done next.

      h2 The Goal
      p.large Design a new task process architecture that:
      ul.large
        li Supports users in managing and progressing their day-to-day tasks
        li Gives a unified experience across all types of tasks
        li Allows small–medium agencies to tweak system processes to suit their unique requirements
        li Allows large–enterprise agencies to implement their own complex processes

      h3 Some History & Learnings
      p.large This isn’t the first time we have built a tool like this. In our sales and lettings CRM, I designed an “if-this-then-that” workflow engine for an enterprise customer that was highly configurable and deeply integrated into the CRM (it could even execute Javascript in an isolated environment). Building a workflow in this tool was extremely complex — it was built for the sole use of an enterprise customer with their own IT team who could write and implement workflows to essentially create their own bespoke features in our platform.
      p.large This time around, we intended to take a different approach and unlock the tool for a broader audience, so we planned upfront to trade off some of the complex features for a more accessible tool that could be used be small and large agencies alike.

      h2 Requirements Definition
      p.large From the set of process maps, I was able to define an initial set of functional requirements that our process engine would need in order to meet the market requirements. This set could also be prioritised based on how often each requirement came up.
      p.large The framework of a task is the task object itself, with a checklist of subtasks which define the process for completion of the task (as well as other related data). The functional requirements for the process engine fit around the subtasks and the configuration of the process defining those subtasks. For example:
      ul.large
        li Assigning a subtask to a particular user or role
        li Setting a relative due date on a subtask based on record fields or task creation
        li Collecting input from the user of the outcome of the subtask
        li Branching to different process paths based on subtask outcomes
        li Setting templated messages that can be sent from subtasks
        li Scheduling subtasks with templated messages to complete (send) automatically
        li Triggering actions (such as sending a message or updating task status) on subtask completion
        li Uploading documents as part of subtask completion
        li Creating related tasks off a subtask (eg booking in an exit inspection as part of a move out task)

      h2 Design Approach
      p.large This project had two key points of interface:
      ol.large
        li The task itself where users (mostly agents or administrators) would be working through the defined process by completing subtasks
        li The configuration of the process where users (mostly high level administrators, managers, or directors) could modify or create the series of subtasks and behaviours
      p.large There are plenty of workflow configuration tools out there, and so I spent some time gathering examples to learn from. This gave me some different approaches to try out, but ultimately the solution would also need to fit into the existing patterns and design system of the Rex PM platform.
      p.large My approach was to wireframe out both sides, building out the framework and testing it by applying it to different process maps. Technical input was also gathered from developers to ensure feasibility. This iteration continued until I had a solution that could achieve the identified requirements as well as the project goals.

      h2 Testing and Validation
      p.large A high-fidelity interactive prototype was built focusing on the configuration and completion of several key processes. Through further calls with agencies the new process engine was tested — both the interface as well as the core functionality was validated. Feedback was synthesised during this process and further iterations were made to the prototype.

      h2 Implementation and Next Steps
      p.large At time of writing, this project is at the early implementation stage. With a validated design for the Process Engine, the next step is to work with the technical team to plan an approach for incremental release.

      hr.spacer

      figure.large
        img(src="/process-engine/process-checklist.webp" alt="A screenshot from a property management application showing a move in task with a checklist of subtasks to be completed")
        figcaption
          p Processes are presented as a checklist of subtasks on a task

      figure
        img.iphone-frame(src="/process-engine/move-out-mobile.webp" alt="A screenshot from a property management mobile application showing a move in task with a checklist of subtasks to be completed")
        figcaption
          p Tasks can be completed on desktop or mobile

      figure
        img(src="/process-engine/process-outcome.gif" alt="A to do list item being checked off, and a popup appearing to collect further input about the outcome of the task")
        figcaption
          p Subtasks can collect an outcome which determines the branch the process engine will take next

      hr.spacer

      figure.large
        img(src="/process-engine/process-config.webp" alt="A screenshot from a property management application showing the configuration settings for a set of subtasks forming a process")
        figcaption
          p Processes can be a simple checklist, or include complex configurations involving branching paths and triggered actions

      figure.large.half-tiles
        img.transparent(src="/process-engine/process-checklist-dialog.webp" alt="A dialog showing the configuration of a subtask")
        img.transparent(src="/process-engine/process-action-dialog.webp" alt="A dialog showing the configuration of a triggered action")
        figcaption
          p Subtasks can be due on dates relative to the task, and have predefined action shortcuts that the user can execute quickly. Or triggered actions can be used to completely automate the subtask.
